trigger:
- master
- release/*

jobs:
  - job: Build
    variables:
      nrfjprog_version: '10.7.0'
      npm_config_runtime: ''
      npm_config_target: ''
      npm_config_disturl: ''
    strategy:
      matrix:
        linux_node_8_x:
          image_name: 'ubuntu-18.04'
          node_version: 8.15.0
          nrfjprog_suffix: 'linux_x64'
        linux_node_10_x:
          image_name: 'ubuntu-18.04'
          node_version: 10.15.0
          nrfjprog_suffix: 'linux_x64'
        linux_node_11_x:
          image_name: 'ubuntu-18.04'
          node_version: 11.7.0
        linux_node_12_x:
          image_name: 'ubuntu-18.04'
          node_version: 12.16.1
          nrfjprog_suffix: 'linux_x64'
        linux_node_13_x:
          image_name: 'ubuntu-18.04'
          node_version: 13.12.0
          nrfjprog_suffix: 'linux_x64'
        linux_electron_2_x:
          image_name: 'ubuntu-18.04'
          node_version: 8.15.0
          nrfjprog_suffix: 'linux_x64'
          npm_config_runtime: 'electron'
          npm_config_target: 2.0.17
          npm_config_disturl: 'https://electronjs.org/headers'
        linux_electron_4_x:
          image_name: 'ubuntu-18.04'
          node_version: 10.15.0
          nrfjprog_suffix: 'linux_x64'
          npm_config_runtime: 'electron'
          npm_config_target: 4.0.6
          npm_config_disturl: 'https://electronjs.org/headers'
        linux_electron_5_x:
          image_name: 'ubuntu-18.04'
          node_version: 10.15.0
          nrfjprog_suffix: 'linux_x64'
          npm_config_runtime: 'electron'
          npm_config_target: 5.0.6
          npm_config_disturl: 'https://electronjs.org/headers'
        linux_electron_8_x:
          image_name: 'ubuntu-18.04'
          node_version: 12.16.1
          npm_config_runtime: 'electron'
          npm_config_target: 8.2.0
          npm_config_disturl: 'https://electronjs.org/headers'
        macOS_node_8_x:
          image_name: 'macos-10.15'
          node_version: 8.15.0
          nrfjprog_suffix: 'darwin_x64'
        macOS_node_10_x:
          image_name: 'macos-10.15'
          node_version: 10.15.0
          nrfjprog_suffix: 'darwin_x64'
        macOS_node_11_x:
          image_name: 'macos-10.15'
          node_version: 11.7.0
        macOS_node_12_x:
          image_name: 'macos-10.15'
          node_version: 12.16.1
          nrfjprog_suffix: 'darwin_x64'
        macOS_node_13_x:
          image_name: 'macos-10.15'
          node_version: 13.12.0
          nrfjprog_suffix: 'darwin_x64'
        macOS_electron_2_x:
          image_name: 'macos-10.15'
          node_version: 8.15.0
          nrfjprog_suffix: 'darwin_x64'
          npm_config_runtime: 'electron'
          npm_config_target: 2.0.17
          npm_config_disturl: 'https://electronjs.org/headers'
        macOS_electron_4_x:
          image_name: 'macos-10.15'
          node_version: 10.15.0
          nrfjprog_suffix: 'darwin_x64'
          npm_config_runtime: 'electron'
          npm_config_target: 4.0.6
          npm_config_disturl: 'https://electronjs.org/headers'
        macOS_electron_5_x:
          image_name: 'macos-10.15'
          node_version: 10.15.0
          nrfjprog_suffix: 'darwin_x64'
          npm_config_runtime: 'electron'
          npm_config_target: 5.0.6
          npm_config_disturl: 'https://electronjs.org/headers'
        macOS_electron_8_x:
          image_name: 'macos-10.15'
          node_version: 12.16.1
          npm_config_runtime: 'electron'
          npm_config_target: 8.2.0
          npm_config_disturl: 'https://electronjs.org/headers'
        win64_node_8_x:
          image_name: 'vs2017-win2016'
          node_version: 8.15.0
          nrfjprog_suffix: 'win32_x64'
        win64_node_10_x:
          image_name: 'vs2017-win2016'
          node_version: 10.15.0
          nrfjprog_suffix: 'win32_x64'
        win64_node_11_x:
          image_name: 'vs2017-win2016'
          node_version: 11.7.0
        win64_node_12_x:
          image_name: 'vs2017-win2016'
          node_version: 12.16.1
          nrfjprog_suffix: 'win32_x64'
        win64_node_13_x:
          image_name: 'vs2017-win2016'
          node_version: 13.12.0
          nrfjprog_suffix: 'win32_x64'
        win64_electron_2_x:
          image_name: 'vs2017-win2016'
          node_version: 8.15.0
          nrfjprog_suffix: 'win32_x64'
          npm_config_runtime: 'electron'
          npm_config_target: 2.0.17
          npm_config_disturl: 'https://electronjs.org/headers'
        win64_electron_4_x:
          image_name: 'vs2017-win2016'
          node_version: 10.15.0
          nrfjprog_suffix: 'win32_x64'
          npm_config_runtime: 'electron'
          npm_config_target: 4.0.6
          npm_config_disturl: 'https://electronjs.org/headers'
        win64_electron_5_x:
          image_name: 'vs2017-win2016'
          node_version: 10.15.0
          nrfjprog_suffix: 'win32_x64'
          npm_config_runtime: 'electron'
          npm_config_target: 5.0.6
          npm_config_disturl: 'https://electronjs.org/headers'
        win64_electron_8_x:
          image_name: 'vs2017-win2016'
          node_version: 12.16.1
          npm_config_runtime: 'electron'
          npm_config_target: 8.2.0
          npm_config_disturl: 'https://electronjs.org/headers'
        win32_node_8_x:
          image_name: 'vs2017-win2016'
          node_version: 8.15.0
          node_arch: '32'
          nrfjprog_suffix: 'win32_ia32'
        win32_node_10_x:
          image_name: 'vs2017-win2016'
          node_version: 10.15.0
          node_arch: '32'
          nrfjprog_suffix: 'win32_ia32'
        win32_node_11_x:
          image_name: 'vs2017-win2016'
          node_version: 11.7.0
          node_arch: '32'
        win32_node_12_x:
          image_name: 'vs2017-win2016'
          node_version: 12.16.1
          node_arch: '32'
          nrfjprog_suffix: 'win32_ia32'
        win32_node_13_x:
          image_name: 'vs2017-win2016'
          node_version: 13.12.0
          node_arch: '32'
          nrfjprog_suffix: 'win32_ia32'
        win32_electron_2_x:
          image_name: 'vs2017-win2016'
          node_version: 8.15.0
          npm_config_runtime: 'electron'
          npm_config_target: 2.0.17
          npm_config_disturl: 'https://electronjs.org/headers'
          node_arch: '32'
          nrfjprog_suffix: 'win32_ia32'
        win32_electron_4_x:
          image_name: 'vs2017-win2016'
          node_version: 10.15.0
          npm_config_runtime: 'electron'
          npm_config_target: 4.0.6
          npm_config_disturl: 'https://electronjs.org/headers'
          node_arch: '32'
          nrfjprog_suffix: 'win32_ia32'
        win32_electron_5_x:
          image_name: 'vs2017-win2016'
          node_version: 10.15.0
          npm_config_runtime: 'electron'
          npm_config_target: 5.0.6
          npm_config_disturl: 'https://electronjs.org/headers'
          node_arch: '32'
        win32_electron_8_x:
          image_name: 'vs2017-win2016'
          node_version: 12.16.1
          npm_config_runtime: 'electron'
          npm_config_target: 8.2.0
          npm_config_disturl: 'https://electronjs.org/headers'
          node_arch: '32'
          nrfjprog_suffix: 'win32_ia32'
    pool:
      vmImage: $(image_name)
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(node_version)
      condition: ne(variables['node_arch'], '32')
      displayName: 'Install Node.js $(node_version)'
    - bash: |
        set -o errexit -o pipefail
        choco install -y nvm
        export PATH=$PATH:$NVM_HOME
        nvm install $(NODE_VERSION) $(NODE_ARCH)
        nvm use $(NODE_VERSION) $(NODE_ARCH)
        ln -sf "$NVM_SYMLINK/node" "$NODE_SYMLINK/node"
      env: {
        NVM_HOME: "/C/ProgramData/nvm",
        NVM_SYMLINK: "/C/ProgramData/nvm/v$(node_version)",
        NODE_SYMLINK: "/C/Program Files/nodejs",
        NODE_VERSION: $(node_version),
        NODE_ARCH: $(node_arch),
      }
      condition: and(contains(variables['image_name'], 'win'), eq(variables['node_arch'], '32'))
      displayName: 'Install Node.js $(node_version) 32-bit'
    - bash: |
        set -o errexit -o pipefail
        sudo apt-get update
        sudo apt-get install ninja-build
      condition: contains(variables['image_name'], 'ubuntu')
      displayName: 'Install ninja on Linux'
    - bash: |
        brew install ninja
      condition: contains(variables['image_name'], 'mac')
      displayName: 'Install ninja on macOS'
    - task: DownloadSecureFile@1
      name: nrfjprogLinux
      inputs:
        secureFile: "nrfjprog-10.7.0-linux_x64.tar.gz"
      condition: and(eq(variables['release'], 'true'), contains(variables['image_name'], 'ubuntu'))
      displayName: 'Donwload internal nrfjprog for release'
    - bash: |
        mkdir nrfjprog
        echo $(nrfjprogLinux.secureFilePath)
        mv $(nrfjprogLinux.secureFilePath) nrfjprog
      condition: and(eq(variables['release'], 'true'), contains(variables['image_name'], 'ubuntu'))
      displayName: 'Download internal nrfjprog for release'
    - task: DownloadSecureFile@1
      name: nrfjprogMac
      inputs:
        secureFile: "nrfjprog-10.7.0-darwin_x64.tar.gz"
      condition: and(eq(variables['release'], 'true'), contains(variables['image_name'], 'mac'))
      displayName: 'Donwload internal nrfjprog for release'
    - bash: |
        mkdir nrfjprog
        mv $(nrfjprogMac.secureFilePath) nrfjprog
      condition: and(eq(variables['release'], 'true'), contains(variables['image_name'], 'mac'))
      displayName: 'Download internal nrfjprog for release'
    - task: DownloadSecureFile@1
      name: nrfjprogWin64
      inputs:
        secureFile: "nrfjprog-10.7.0-win32_x64.tar.gz"
      condition: and(eq(variables['release'], 'true'), contains(variables['image_name'], 'win'))
      displayName: 'Donwload internal nrfjprog for release'
    - script: |
        mkdir nrfjprog
        move $(nrfjprogWin64.secureFilePath) nrfjprog
      condition: and(eq(variables['release'], 'true'), contains(variables['image_name'], 'win'))
      displayName: 'Download internal nrfjprog for release'
    - task: DownloadSecureFile@1
      name: nrfjprogWin32
      inputs:
        secureFile: "nrfjprog-10.7.0-win32_ia32.tar.gz"
      condition: and(
        eq(variables['release'], 'true'),
        contains(variables['image_name'], 'win'),
        eq(variables['node_arch'], '32'))
      displayName: 'Donwload internal nrfjprog for release'
    - script: |
        mkdir nrfjprog
        move $(nrfjprogWin32.secureFilePath) nrfjprog
      condition: and(
        eq(variables['release'], 'true'),
        contains(variables['image_name'], 'win'),
        eq(variables['node_arch'], '32'))
      displayName: 'Download internal nrfjprog for release'
    - bash: |
        set -o errexit -o pipefail
        node -v
        npm i --build-from-source
        npm run package-prebuilt
      env: {
        npm_config_runtime: $(npm_config_runtime),
        npm_config_target: $(npm_config_target),
        npm_config_disturl: $(npm_config_disturl),
        NODE_VERSION: $(node_version),
        NODE_ARCH: $(node_arch),
        NODE_PRE_GYP_GITHUB_TOKEN: $(wayland_github_token),
        RELEASE: $(release)
      }
      displayName: 'Build'
    - task: PublishPipelineArtifact@1
      inputs:
        path: $(System.DefaultWorkingDirectory)/build/stage
      displayName: 'Publish artifacts'

  - job: GitHubRelease
    dependsOn: Build
    steps:
    - checkout: none
    - task: DownloadPipelineArtifact@2
      inputs:
        patterns: '**/*.tar.gz'
        path: $(Build.ArtifactStagingDirectory)
      displayName: 'Download artifacts'
    - bash: |
        mv $(Build.ArtifactStagingDirectory)/*/*/* $(Build.ArtifactStagingDirectory)
      displayName: 'Move files'
    - task: GitHubRelease@0
      inputs:
        gitHubConnection: 'waylandCI'
        repositoryName: 'NordicSemiconductor/pc-nrfjprog-js'
        action: 'edit'
        tagSource: 'Git tag'
        tag: '$(Build.SourceBranchName)'
        assetUploadMode: 'replace'
        isDraft: 'true'
        addChangeLog: 'false'
      condition: ne(variables['Build.Reason'], 'PullRequest')

  - job: Test
    dependsOn: GitHubRelease
    strategy:
      matrix:
        linux:
          osType: 'linux'
        mac:
          osType: 'mac'
        win64:
          osType: 'win64'
        win32:
          osType: 'win32'
    pool: server
    steps:
    - task: InvokeRESTAPI@1
      displayName: Test
      inputs:
        connectionType: 'connectedServiceName'
        serviceConnection: 'waylandJenkins'
        method: 'POST'
        urlSuffix: 'view/pc-nrfjprog-js/job/pc-nrfjprog-js-$(osType)/buildWithParameters?BRANCH=$(Build.SourceBranch)&VSTS_URL=$(system.CollectionUri)&TOKEN=$(system.AccessToken)&PROJECT_ID=$(system.teamProjectId)&HUB_NAME=$(system.hostType)&PLAN_ID=$(system.planId)&TASK_ID=$(system.taskInstanceId)&JOB_ID=$(system.jobId)'
        waitForCompletion: 'true'
      condition: ne(variables['Build.Reason'], 'PullRequest')
